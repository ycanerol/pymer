#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct 10 11:51:38 2017

@author: ycan
"""

import numpy as np
import matplotlib.pyplot as plt


def show_sta(sta, max_i, f_size=10):
    plt.plot(figsize=(12, 12), dpi=200)

    for i in range(20):
        plt.subplot(4, 5, i+1)

        plt.imshow(sta[max_i[0]-f_size:max_i[0]+f_size+1,
                       max_i[1]-f_size:max_i[1]+f_size+1,
                       i])  # , cmap='Greys')
        plt.axis('off')
    plt.show()
exp_date = '2017_01_17'
files = ['4105', '103', '7703', '23101']

#files = ['7703']

for filename in files:
    main_dir = ('/home/ycan/Documents/Yunus_rotation_2017_06/data/' +
                'Experiments/Mouse/')

    file_path = exp_date + '/analyzed/2_SP_C' + filename + '.npz'

    data = np.load(main_dir + file_path)

    sta = data['sta_unscaled']
    max_i = data['max_i']

    # Isolate the frame that wtll be used to fit the 2D Gaussian distribution
    # This is a first pass approach, just to see if anything comes out
    fit_frame = sta[:, :, max_i[2]]
#
#    show_sta(sta, max_i)
#    plt.imshow(fit_frame)
#    plt.show()

#    # %% Fit 2D Gaussian
#
#    params = fitgaussian(fit_frame)
#
#    fit = gaussian(*params)
#
#    plt.contour(fit(*np.indices(fit_frame.shape)), cmap=plt.cm.copper)
#    plt.title(filename)
#    plt.show()

    # %% Concenctric rings using pixel distances

    def ringmask(data, center_px, r):
        # Create a ring shaped mask  in spatial dimention
        # and apply to the STA along time axis

        # HINT: "True" masks the value out
        mask = np.array([True]*data.size).reshape(data.shape)

        cx, cy, _ = center_px

        # Check if the specified ring size is larger than the shape
        outofbounds = (cx+r > data.shape[0]-1 or cx-r < 0 or
                       cx+r > data.shape[0]-1 or cx-r < 0)

        mask[cx-r:cx+r+1, cy-r:cy+r+1, :] = False
        mask[cx-(r-1):cx+(r), cy-(r-1):cy+(r), :] = True

        masked_data = np.ma.array(data, mask=mask)

        if outofbounds: masked_data = None

        return masked_data, outofbounds

    plt.figure(figsize=(12, 10))
#    fig.set_height
    plt.suptitle('Temporal filter at n pixel distance from center pixel\n{} {}'.format(exp_date, filename))
    ring_sizes1 = [0, 3]
    ring_sizes2 = [3, 7]
    for i in range(ring_sizes1[0], ring_sizes1[1]):
        plt.subplot(2, 1, 1)
        masked = ringmask(sta, max_i, i)
        if not masked[1]:
            plt.plot(np.mean(masked[0], axis=(0, 1)), label=str(i))
        plt.legend()

    for i in range(ring_sizes2[0], ring_sizes2[1]):
        plt.subplot(2, 1, 2)
        masked = ringmask(sta, max_i, i)
        if not masked[1]:
            plt.plot(np.mean(masked[0], axis=(0, 1)), label=str(i))
        plt.legend()
#    plt.legend(str(np.arange(ring_sizes[0], ring_sizes[1]))[1:-2][::2])
    plt.savefig('/home/ycan/Documents/notes/week2/plots/{}-{}.svg'.format(exp_date,filename),
                format='svg', dpi=300)
    plt.show()

    # %% Plot interesting sizes for 7703
    list1 = [0, 1, 2, 35, 36, 37]
    for i in list1:
        masked = ringmask(sta, max_i, i)
        if not masked[1]: plt.plot(np.mean(masked[0], axis=(0, 1)))
        plt.legend(str(list1)[1:-1].split(','))
